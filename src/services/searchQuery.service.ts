/**
 * The functions saveSearchQuery and getSearchHistory interact with a MongoDB database to respectively
 * save search queries and retrieve search history for a specific user.
 * @param {string} query - The `query` parameter in the `saveSearchQuery` function is a string that
 * represents the search query that the user entered.
 * @param userId - The `userId` parameter in the `saveSearchQuery` and `getSearchHistory` functions is
 * of type `mongoose.Types.ObjectId`. This is a unique identifier used in MongoDB to represent a
 * specific document in a collection. It is typically generated by MongoDB when a new document is
 * created and is used as
 * @param {string[]} genres - Genres is an array of strings that represents the genres associated with
 * a search query. It could include genres like "Action", "Comedy", "Drama", "Sci-Fi", etc.
 * @returns The `saveSearchQuery` function returns a Promise that resolves to an `ISearchQueryDoc`
 * object, which represents the saved search query. The `getSearchHistory` function returns a Promise
 * that resolves to an array of `ISearchQueryDoc` objects, representing the search history for a
 * specific user identified by the `userId`.
 */

import mongoose from "mongoose";
import { ISearchQueryDoc } from "../interfaces/searchQuery.interface";
import SearchQuery from "../models/searchQuery.model";

/**
 * Save a search query
 * @param {string} query
 * @param {mongoose.Types.ObjectId} userId
 * @param {string[]} genres
 * @returns {Promise<ISearchQueryDoc>}
 */
export const saveSearchQuery = async (
  query: string,
  userId: mongoose.Types.ObjectId,
  genres: string[]
): Promise<ISearchQueryDoc> => {
  const searchQuery = await SearchQuery.create({ query, userId, genres });
  return searchQuery;
};

/**
 * get a search query
 * @param {mongoose.Types.ObjectId} userId
 * @returns {Promise<ISearchQueryDoc[]>}
 */
export const getSearchHistory = async (
  userId: mongoose.Types.ObjectId
): Promise<ISearchQueryDoc[]> => {
  return await SearchQuery.find({ userId }).sort({ createdAt: -1 }).exec();
};

/**
 * get a search query
 * @param {mongoose.Types.ObjectId} userId
 * @returns {Promise<string[]>}
 */
export const getPreferredGenres = async (userId: mongoose.Types.ObjectId): Promise<string[]> => {
  const genres = await SearchQuery.distinct("genres", {
    userId,
  });
  return genres.flat(); // Flatten the array of arrays
};
